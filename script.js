// Generated by CoffeeScript 1.6.3
(function() {
  var $head, $segments, $snake, animate, audioElement, getRotation, i, minLength, onCanPlay, pewpew, pewpewThrottled, shootLaser, snakeRads, snakeX, snakeY, transform, transformQueue, turnDirection, velocity, whip, xMax, xMin, yMax, yMin, _i, _ref;

  audioElement = document.createElement('audio');

  audioElement.setAttribute('id', 'audio');

  audioElement.setAttribute('preload', 'auto');

  audioElement.setAttribute('type', 'audio/mpeg');

  audioElement.setAttribute('loop', '');

  document.body.insertBefore(audioElement, document.body.firstChild);

  audioElement.setAttribute('src', 'pewpew1.mp3');

  $snake = $('.snake');

  $head = $('.head');

  $segments = $('.segment');

  snakeRads = Math.PI / 2;

  snakeX = 100;

  snakeY = -100;

  velocity = 3;

  transformQueue = [];

  for (i = _i = 0, _ref = $segments.length * 5; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    transform = "translate(" + snakeX + "px, " + (-snakeY + 4 * i) + "px)";
    transformQueue.push({
      '-webkit-transform': transform,
      transform: transform
    });
  }

  xMin = 20;

  yMin = -20;

  xMax = window.innerWidth - 60;

  yMax = -(window.innerHeight - 60);

  minLength = 120;

  turnDirection = 0;

  getRotation = function() {
    var cosine, rotation, sine, xLength, yLength;
    sine = Math.sin(snakeRads);
    cosine = Math.cos(snakeRads);
    xLength = ((cosine > 0 ? xMax : xMin) - snakeX) / cosine;
    yLength = ((sine < 0 ? yMax : yMin) - snakeY) / sine;
    rotation = Math.sin(Date.now() / 150) / 10;
    if (xLength < minLength || yLength < minLength) {
      if (turnDirection === 0) {
        turnDirection = rotation > 0 ? -1 : 1;
      }
      return 0.2 * turnDirection;
    } else {
      turnDirection = 0;
      return rotation;
    }
  };

  animate = function() {
    requestAnimationFrame(animate);
    snakeRads += getRotation();
    snakeX = snakeX + velocity * Math.cos(snakeRads);
    snakeY = snakeY + velocity * Math.sin(snakeRads);
    transform = "translate(" + snakeX + "px, " + (-snakeY) + "px) rotate(" + (-snakeRads) + "rad)";
    transformQueue.unshift({
      '-webkit-transform': transform,
      transform: transform
    });
    $snake.children().each(function(i) {
      return $(this).css(transformQueue[i * 5]);
    });
    transformQueue.pop();
    return velocity = 3;
  };

  shootLaser = function() {
    $head.css('background-color', 'red');
    return setTimeout((function() {
      return $head.css('background-color', 'green');
    }), 80);
  };

  pewpewThrottled = false;

  pewpew = function(array) {
    if (pewpewThrottled || array[91] < 234) {
      return;
    }
    shootLaser();
    pewpewThrottled = true;
    return setTimeout((function() {
      return pewpewThrottled = false;
    }), 110);
  };

  whip = function(array) {
    var snare;
    snare = array[382];
    if (snare > 170) {
      return velocity += snare / 50;
    }
  };

  onCanPlay = function() {
    var analyser, array, audioContext, audioScript, audioSource, gain;
    this.removeEventListener('canplay', onCanPlay);
    audioContext = new (window.AudioContext || window.webkitAudioContext);
    console.log('sample rate:', audioContext.sampleRate);
    gain = audioContext.createGain();
    audioSource = audioContext.createMediaElementSource(audioElement);
    audioScript = audioContext.createScriptProcessor(512);
    analyser = audioContext.createAnalyser();
    analyser.smoothingTimeConstant = 0.2;
    analyser.fftSize = 1024;
    gain.gain.value = 0.02;
    audioSource.connect(gain);
    gain.connect(audioContext.destination);
    audioSource.connect(analyser);
    analyser.connect(audioScript);
    audioScript.connect(audioContext.destination);
    array = new Uint8Array(analyser.frequencyBinCount);
    audioScript.addEventListener('audioprocess', window.pin = function(e) {
      analyser.getByteFrequencyData(array);
      pewpew(array);
      return whip(array);
    });
    setTimeout(function() {
      return audioElement.play();
    }, 20);
    return audioElement.play();
  };

  audioElement.addEventListener('canplay', onCanPlay);

  animate();

}).call(this);
